import { ValidationPipe, BadRequestException } from '@nestjs/common'
import { ValidationError } from 'class-validator'
import { ValidationPipeOptions } from '@nestjs/common/pipes/validation.pipe'

/**
 * Format validation errors to a simple array of strings.
 * This function is used in the CustomValidationPipeWithErrorFormatting class
 * to flatten the validation errors and return a simple array of strings.
 *
 * @param errors - The validation errors to format.
 */
function formatValidationErrorMessages(errors: ValidationError[]): string[] {
  return errors.reduce((errorMessages: string[], error: ValidationError) => {
    const { constraints, children } = error

    // Constraints correspond to an object with all constraints that failed validation with error messages.
    // I'm first checking then and apply the modification.
    if (constraints) {
      const currentErrorMessages = Object.values(constraints).map((message) => message.replace(new RegExp(`^${error.property}\\.`), ''))
      errorMessages.push(...currentErrorMessages)
    }

    // Then, I'm checking if the error has children (nested properties) and recursively call the function.
    if (Array.isArray(children) && children.length > 0) {
      const childErrorMessages = formatValidationErrorMessages(children)
      errorMessages.push(...childErrorMessages)
    }

    return errorMessages
  }, [])
}

/**
 * Custom validation pipe that formats the error messages
 * to remove the property name from the error message for nested objects generated by class-validator
 */
export class CustomValidationPipeWithErrorFormatting extends ValidationPipe {
  constructor(options?: ValidationPipeOptions) {
    super({
      ...options,
      exceptionFactory: (errors: ValidationError[]): BadRequestException => {
        const formattedErrors = formatValidationErrorMessages(errors)
        return new BadRequestException(formattedErrors)
      },
    })
  }
}
